
AC_INIT()

AC_PROG_CXX
AC_CANONICAL_HOST

CXXFLAGS="${CXXFLAGS} -pthread"
LDFLAGS="${LDFLAGS} -pthread"


case "${host_os}" in
  darwin*)
    echo ===========================================================
    echo Setting up build environment for ${host_os}  # ${target_cpu}${target_os}
    echo ===========================================================
    CXXFLAGS="${CXXFLAGS} -I/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers"
    LIBS="${LIBS} -framework Carbon -framework Foundation -framework AppKit"
    os=macosx
    ;;
  *linux*)
    echo ===========================================================
    echo Setting up build environment for ${host_os}
    echo ===========================================================

    # in linux we only have this option
    os=linux
    ;;
  *win32*|*mingw*)
    echo ===========================================================
    echo Setting up build environment for ${host_os}
    echo ===========================================================

    os=win32
    ;;
  *)
    echo ===========================================================
    echo Setting up build environment for ${host_os}
    echo ===========================================================
    AC_MSG_ERROR([ "Unsupported target operating system" ])
esac
AM_CONDITIONAL(WIN32, test "x$os" = "xwin32")
AM_CONDITIONAL(LINUX, test "x$os" = "xlinux")
AM_CONDITIONAL(OSX, test "x$os" = "xmacosx")



AC_CHECK_TOOL(AR, ar)
AC_PROG_RANLIB
AC_PROG_INSTALL

AM_INIT_AUTOMAKE("eutils","1.0.0")

#export CPLUS_INCLUDE_PATH="${CPLUS_INCLUDE_PATH}"
#export C_INCLUDE_PATH="${C_INCLUDE_PATH}"
#export LIBRARY_PATH="${LIBRARY_PATH}"

# Check for GSL installation
AM_PATH_GSL(1.7)
if test "$no_gsl" != yes; then
  CPPFLAGS="$CPPFLAGS $GSL_CFLAGS"
  CXXFLAGS="$CXXFLAGS $GSL_CFLAGS"
  CFLAGS="$CFLAGS $GSL_CFLAGS"
  LIBS="$LIBS $GSL_LIBS"
  AC_DEFINE_UNQUOTED(HAVE_LIBGSL,1,[define when libgsl exists])
else
  AC_MSG_WARN([
    Continuing without GSL support.
    If you want GSL support please install the gsl headers and libraries.
    If GSL is installed you might need to indicate where using the argument: --with-gsl-prefix=DIR
  ])
fi

# Check for MYSQL installation
AM_PATH_MYSQL(4.0.0)
if test "$no_mysql" != yes; then
  CXXFLAGS="$CXXFLAGS $MYSQL_CFLAGS"
  CFLAGS="$CFLAGS $MYSQL_CFLAGS"
  LIBS="$LIBS $MYSQL_LIBS"
  AC_DEFINE_UNQUOTED(HAVE_LIBMYSQL,1,[define when libmysql exists])
else
  AC_MSG_WARN([
    Continuing without MYSQL support.
    If you want MYSQL support please install the mysql headers and libraries.
    If MYSQL is installed you might need to indicate where using the argument: --with-mysql-prefix=DIR
  ])
fi

# Check for NCURSES installation
AM_PATH_NCURSES(5.0)
if test "$no_ncurses" != yes; then
  CXXFLAGS="$CXXFLAGS $NCURSES_CFLAGS"
  CFLAGS="$CFLAGS $NCURSES_CFLAGS"
  LIBS="$LIBS $NCURSES_LIBS"
  AC_DEFINE_UNQUOTED(HAVE_LIBNCURSES,1,[define when ncurses exists])
else
  AC_MSG_WARN([
    Continuing without NCURSES support.
    If you want NCURSES support please install ncurses headers and libraries.
    If NCURSES is installed you might need to indicate where using the argument: --with-ncurses-prefix=DIR
  ])
fi

AC_CHECK_LIB(rt,main)

AM_PATH_GMP(5.0)
if test "x$no_gmp" = "x"; then
  echo "Compiling GNU MP library support"
  AC_DEFINE_UNQUOTED(HAVE_GMPLIB,1,[define when gnu mp library exists])
  LIBS="$LIBS $GMP_LIBS"
fi
AM_CONDITIONAL(HAVE_GMPLIB, test "x$no_gmp" = "x")


AC_CHECK_LIB([mpfr],main,[mpfrlib_exists=1])
if test "x$mpfrlib_exists" != "x"; then
  echo "Compiling mpfr library support"
  AC_DEFINE_UNQUOTED(HAVE_MPFRLIB,1,[define when mpfr library exists])
  LIBS="$LIBS -lmpfr"
fi
AM_CONDITIONAL(HAVE_MPFRLIB, test "x$mpfrlib_exists" != "x")

AC_CHECK_LIB(mpi,main,,no_mpi=yes)
if test "x$no_mpi" != "xyes"; then
  AC_CHECK_HEADER([mpi.h],,no_mpi=yes)
  if test "x$no_mpi" = "xyes"; then
    no_mpi=""
    AC_CHECK_HEADER([mpi/mpi.h],,no_mpi=yes)
    if test "$x$no_mpi" != "xyes"; then
      CXXFLAGS="${CXXFLAGS} -I/usr/include/mpi"
    fi
  fi
fi
if test "x$no_mpi" != "xyes"; then
  echo "Compiling MPI library support"
  AC_CHECK_LIB(mpi_cxx,main)
  AC_CHECK_LIB(mpi++,main)
  AC_DEFINE_UNQUOTED(HAVE_MPILIB,1,[define when MPI library exists])
  LIBS="$LIBS -lmpi"
fi
AM_CONDITIONAL(HAVE_MPILIB, test "x$no_mpi" = "x")

AC_CHECK_LIB(apophenia,main,[apolib_exists=1])
if test "x$apolib_exists" != "x"; then
  echo "Compiling apophenia library support"
  AC_DEFINE_UNQUOTED(HAVE_APOLIB,1,[define when apophenia library exists])
  LIBS="$LIBS -lapophenia"
fi
AM_CONDITIONAL(HAVE_APOLIB, test "x$apolib_exists" != "x")

AC_CHECK_LIB(z,main,[zlib_exists=1])
if test "x$zlib_exists" != "x"; then
  echo "Compiling zlib support"
  AC_DEFINE_UNQUOTED(HAVE_ZLIB,1,[define when zlib exists])
  LIBS="$LIBS -lz"
fi
AM_CONDITIONAL(HAVE_ZLIB, test "x$zlib_exists" != "x")



AC_ARG_ENABLE(regcommon, [  --disable-regcommon    disable registration of all eutils classes and methods. Useful when developing to reduce compiling time. ], ,enable_regcommon="yes" )
AC_ARG_WITH(readline, [  --without-readline    disable readline library. ], ,with_readline="yes" )

if test "x$enable_regcommon" = "xyes"; then
  AC_DEFINE_UNQUOTED(REGISTER_COMMON,1,[register all eutils classes and methods])
fi

if test "x$with_readline" = "xyes"; then
  AC_CHECK_LIB(readline,main,,no_readline=1)
  if test "x$no_readline" = "x"; then
    AC_CHECK_HEADER([readline/readline.h],[AC_DEFINE([HAVE_READLINE_H],[1],[define when readline.h exists])])
    LIBS="$LIBS -lreadline"
  fi
fi

#AC_CHECK_LIB(pthread,main)

AC_CHECK_HEADER(regex.h,,no_regex=1)
if test "x$no_regex" = "x"; then
AC_DEFINE_UNQUOTED(HAVE_REGEX,1,[define when regex exists])
fi


EUTILS_CXXFLAGS="-I$includedir $CXXFLAGS"
EUTILS_LDFLAGS="$LDFLAGS"
EUTILS_LIBS="eutils/libeutils.a $LIBS"

AC_SUBST(EUTILS_CXXFLAGS)
AC_SUBST(EUTILS_LDFLAGS)
AC_SUBST(EUTILS_LIBS)

AM_CONFIG_HEADER(config.h)
AX_PREFIX_CONFIG_H

AC_CONFIG_FILES([eutils.pc Makefile sci/Makefile net/Makefile])
AC_CONFIG_FILES([eutils-config],[chmod +x eutils-config])

AC_OUTPUT



